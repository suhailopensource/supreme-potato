class Solution {
  public:
//   const int N = 1e5+10;
//   bool visited[N];
//   vector<int> g[N];
    // Function to detect cycle in an undirected graph.
    bool dfs(int vertex, int par, vector<int> g[],bool visited[]){
    visited[vertex] = true;
    bool isloopExists = false;
    for(int child : g[vertex]){
       if(visited[child] && child == par) continue;
       if(visited[child]) return true;
        isloopExists |= dfs(child,vertex,g,visited);
    }
    return isloopExists;
}
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        bool vis[V+10];
        for(int i =0; i<=V;i++){
            vis[i] = 0;
        }
        bool isloopExists = false;
    for(int i =0; i<V;++i){
        if(vis[i]) continue;     
        if(dfs(i,-1,adj,vis)){
          return true;
        }
     }
     return false;
    }
};