class Solution {
public:
    int pivotIndex(vector<int>& nums) {
            int sum = 0, leftsum = 0;
        for (int x: nums) sum += x;
        for (int i = 0; i < nums.size(); ++i) {
            if (leftsum == sum - leftsum - nums[i]) return i;
            leftsum += nums[i];
        }
        return -1;
    }
};


METHOD @@ 2


class Solution {
public:
    int pivotIndex(vector<int>& nums) {
        int t = 0;
        for (int num : nums) t += num;
        int temp = 0;
        for (int i = 0; i < nums.size(); temp += nums[i++])
            if (nums[i]==t-2*temp)
                return i;
        return -1;
    }
};

METHOD @@ 3

class Solution {
public:
    int pivotIndex(vector<int>& nums) {
        vector<int> leftsum;
        vector<int> rightsum;
        int n = nums.size();
        int j =0,ans = -1;
        leftsum.push_back(0);
        for(int i = 1; i<n;i++){
            leftsum.push_back(leftsum[i-1]+nums[i-1]);
        }
        
        rightsum.push_back(0);
        for(int i = n-1; i>0;i--){
            rightsum.push_back(rightsum[j]+nums[i]);
            j++;
        }
          reverse(rightsum.begin(),rightsum.end());
        for(int i =0; i<n;i++){
            if(rightsum[i] == leftsum[i]){
                ans = i;
                break;
            }
        }
        return ans;
    }
};