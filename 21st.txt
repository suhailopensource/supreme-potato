class Solution{
    public:
    //Complete this function
    //Function to check whether there is a subarray present with 0-sum or not.
    bool subArrayExists(int arr[], int n)
    {
        //Your code here
        int p = 0;
        unordered_set<int> s;
        for(int i = 0; i<n;i++){
            p = p + arr[i];
            if(p==0){
                return true;
            }
            if(s.find(p) != s.end()){
                return true;
            }
            s.insert(p);
        }
        return false; 
    }
};


METHOD 2 @ MAP\\


class Solution{
    public:
    //Complete this function
    //Function to check whether there is a subarray present with 0-sum or not.
    bool subArrayExists(int arr[], int n)
    {
        //Brute Force => O(n^2)
        /*for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum+=arr[j];
                if(sum==0)
                    return true;
            }
        }
        return false;*/
        
        //Using unordered map => O(n)
        unordered_map<int,int> mp;
       int sum=0;
       for(int i=0;i<n;i++){
           sum+=arr[i];
           if(sum==0 || mp.find(sum) !=mp.end()){
               return 1;
           }
           mp[sum];
       }
       return 0;
    }
};