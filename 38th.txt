
 BEST

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        //first of all create  the size
        int n=matrix.size();
        int m=matrix[0].size();
        int i=0;
        int j=m-1;
        while(i<n&&j>=0)
        {
            // here we will create the ele that will show us the that it assign to some value or note to give some value on the behalf of that we are comparing the values 
            int ele=matrix[i][j];
            if(ele==target)
            {
                return true;
            }
            else if(ele<target)
            {
                i++;
            }
            else if(ele>target)
            {
                j--;
            }
        }
        return false;
    }
};


mETHOD @@ 2 binary search;

class Solution {
public:
   bool searchMatrix(vector<vector<int>>& matrix, int target) {
        // Getting row and coloum size;
        int row = matrix.size();
        int col = matrix[0].size();
        
        // setting element for binary search
        int start = 0;
        int end = (row*col) -1;
        int mid,element;
        
        // starting our binary search
        while(start<=end){
            mid = (start+end)/2;
            element = matrix[mid/col][mid%col];
            if(element == target )
                return true;
            if(element < target){
                start = mid+1;
            }
            else{
                end = mid-1;
            }
        }
        // if element not found return false
        return false;
    }
};class Solution {
public:
   bool searchMatrix(vector<vector<int>>& matrix, int target) {
        // Getting row and coloum size;
        int row = matrix.size();
        int col = matrix[0].size();
        
        // setting element for binary search
        int start = 0;
        int end = (row*col) -1;
        int mid,element;
        
        // starting our binary search
        while(start<=end){
            mid = (start+end)/2;
            element = matrix[mid/col][mid%col];
            if(element == target )
                return true;
            if(element < target){
                start = mid+1;
            }
            else{
                end = mid-1;
            }
        }
        // if element not found return false
        return false;
    }
};


