class Solution{

    // Function to find the trapped water between the blocks.
    public:
    long long trappingWater(int arr[], int n){
        // code here
        int l[n], r[n];
        l[0] = arr[0];
        r[n-1] = arr[n-1];
        long long sum = 0;
        for( int i = 1 ; i < n; i++){
           l[i] = max(l[i-1], arr[i]);
        }
        for( int i = n-2 ; i >= 0; i--){
           r[i] = max(r[i+1], arr[i]);
        }
        for(int i = 1; i < n-1; i++){
            sum += min(l[i], r[i])-arr[i];
        }
        return sum;
    }
};

BEST METHOD @@ 2

class Solution{
   public:
    //Function to find median of the array elements.

long long trappingWater(int arr[], int n){
       // code here
       long long int res=0;
       int left=0,right=n-1;
       int leftmax=0,rightmax=0;
       
       while(left<=right){
           if(arr[left]<=arr[right]){
               if(arr[left]>=leftmax){
                   leftmax=arr[left];
               }
               else{
                   res+=leftmax-arr[left];
               }
               left++;
           }
           else{
               if(arr[right]>=rightmax){
                   rightmax=arr[right];
               }
               else{
                   res+=rightmax-arr[right];
               }
               right--;
           }
       }
       return res;
   }


};