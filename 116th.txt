    public:
    map<int, vector<int>, greater<int>> mp;
    int setBit(int n){
        int ans = 0;
        while(n>0){
            if((n&1) == 1){
                ans++;
            }
            n = n >> 1;
        }
        return ans;
    }
    
    void sortBySetBitCount(int arr[], int n)
    {
        // Your code goes here
        for(int i =0; i<n;i++){
            mp[setBit(arr[i])].push_back(arr[i]);
        }
        int i =0;
        for(auto pr : mp){
            for(auto x : pr.second){
                arr[i++] = x;
            }
        }
    }
};


METHOD @@ 2


class Solution{
    public:
  static int cmp(int a, int b){
        int count1 = __builtin_popcount(a);
        int count2 = __builtin_popcount(b);
        
        if(count1 <= count2){
            return false;
        }
        return true;
    }
    void sortBySetBitCount(int arr[], int n)
    {
        // Your code goes here
        stable_sort(arr,arr+n,cmp);
    }
};
