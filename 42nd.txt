class Solution{ 
    private: 
   int MAX_AREA(vector<int> &histo){
       stack<int> st;
       int maxA = 0;
       int n = histo.size();
       for(int i = 0; i <= n; i++){
           while(!st.empty() && (i == n || histo[st.top()] >= histo[i])){
               int height = histo[st.top()];
               st.pop();
               int width;
               if(st.empty()){
                   width = i;
               }else{
                   width = i - st.top() - 1;
               }
               maxA = max(maxA, width*height);
               
           }
           st.push(i);
       }
           return maxA;
   }
    
  public:
    int maxArea(int M[MAX][MAX], int n, int m) {
        vector<int> ans;
        int max_area = 0; 
        for(int i = 0;i < m; i++)
            ans.push_back(M[0][i]);
        max_area = MAX_AREA(ans);
        
        
        for(int i = 1; i<n;i++){
            for(int j = 0; j< m; j++){
                if(M[i][j]==0){
                    ans[j] = 0;
                }else{
                    ans[j] += 1;
                }
            }
                max_area = max(max_area,MAX_AREA(ans));
        }
        return max_area     ;
    }
};